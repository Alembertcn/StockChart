/*
 * Copyright 2025 hai
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 *
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    apply from: rootProject.file("gradle/config.gradle")
    ext{
        kotlin_version = "1.7.10"
        localProps = new Properties()
        if(project.rootProject.file('local.properties').exists()){
            project.rootProject.file('local.properties').withInputStream { stream ->
                localProps.load(stream)
            }
        }
        //获取本地定义的变量
        getLocalEnv = { key->
            return localProps.get(key) ?: System.getenv(key) // 优先返回属性文件的值，否则返回环境变量
        }
    }
    repositories {
        mavenLocal()
        println("userName ${ System.getenv("WB_REPO_USER")} pwd ${System.getenv("WB_REPO_PWD")}")
        if(rootProject.file("app/repo").exists()){
            maven { url "${rootProject.file("app/repo").absolutePath}" }
        }
        if(rootProject.file("repo").exists()){
            maven { url "${rootProject.file("repo").absolutePath}" }
        }
        maven {
            allowInsecureProtocol = true
            url 'https://web-gy.httester.com/repository/maven-public/'
            credentials{
                username getLocalEnv("WB_REPO_USER")
                password getLocalEnv("WB_REPO_PWD")
            }
        }

        // 配置Mob Maven库
        maven { url "https://mvn.mob.com/android" }
        maven { url "https://mirrors.tencent.com/repository/maven/tencent_public" }
        maven { url "https://mirrors.tencent.com/repository/maven/liteavsdk" }
        maven { url "https://mirrors.tencent.com/nexus/repository/maven-public/" }


        maven {
            url "https://maven.aliyun.com/repository/gradle-plugin"
        }
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.+'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
    }
}


allprojects {
    repositories {
        mavenLocal()
        if(rootProject.file("app/repo").exists()){
            maven { url "${rootProject.file("app/repo").absolutePath}" }
        }
        if(rootProject.file("repo").exists()){
            maven { url "${rootProject.file("repo").absolutePath}" }
        }
        maven {
            allowInsecureProtocol = true
            url 'https://web-gy.httester.com/repository/maven-public/'
            credentials{
                username getLocalEnv("WB_REPO_USER")
                password getLocalEnv("WB_REPO_PWD")
            }
        }

        // 配置Mob Maven库
        maven { url "https://mvn.mob.com/android" }
        maven { url "https://mirrors.tencent.com/repository/maven/tencent_public" }
        maven { url "https://mirrors.tencent.com/repository/maven/liteavsdk" }
        maven { url "https://mirrors.tencent.com/nexus/repository/maven-public/" }


        maven {
            url "https://maven.aliyun.com/repository/gradle-plugin"
        }
        google()
        mavenCentral()
        maven { url "https://maven.aliyun.com/repository/jcenter" }

    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// 在根 build.gradle 中
//subprojects {
//    tasks.withType(PublishToMavenRepository).configureEach {
//        dependsOn(project.tasks.matching { it.name == 'publish' })
//    }
//}